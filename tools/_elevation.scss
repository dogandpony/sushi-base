/* =========================================================================
 * ELEVATION TOOLS
 * ========================================================================= */

/**
 * Shadow colors.
 * http://codepen.io/shyndman/pen/ojxmdY
 */

$elevation-key-umbra: rgba(0, 0, 0, 0.2) !default;
$elevation-key-penumbra: rgba(0, 0, 0, 0.14) !default;
$elevation-ambient: rgba(0, 0, 0, 0.12) !default;


/**
 * The hand-designed reference shadow sets.
 * Source: http://codepen.io/shyndman/pen/ojxmdY
 */

$elevation-reference-shadows: (
  ( elevation: 0,
    shadows: (
        (0, 0, 0, 0, $elevation-key-umbra),
        (0, 0, 0, 0, $elevation-key-penumbra),
        (0, 0, 0, 0, $elevation-ambient),
    )
  ),
  ( elevation: 2,
    shadows: (
        (0, 3, 1, -2, $elevation-key-umbra),
        (0, 2, 2, 0, $elevation-key-penumbra),
        (0, 1, 5, 0, $elevation-ambient),
    )
  ),
  ( elevation: 3,
    shadows: (
        (0, 3, 3, -2, $elevation-key-umbra),
        (0, 3, 4, 0, $elevation-key-penumbra),
        (0, 1, 8, 0, $elevation-ambient),
    )
  ),
  ( elevation: 4,
    shadows: (
        (0, 2, 4, -1, $elevation-key-umbra),
        (0, 4, 5, 0, $elevation-key-penumbra),
        (0, 1, 10, 0, $elevation-ambient),
    )
  ),
  ( elevation: 6,
    shadows: (
        (0, 3, 5, -1, $elevation-key-umbra),
        (0, 6, 10, 0, $elevation-key-penumbra),
        (0, 1, 18, 0, $elevation-ambient),
    )
  ),
  ( elevation: 8,
    shadows: (
        (0, 5, 5, -3, $elevation-key-umbra),
        (0, 8, 10, 1, $elevation-key-penumbra),
        (0, 3, 14, 2, $elevation-ambient),
    )
  ),
  ( elevation: 16,
    shadows: (
        (0, 8, 10, -5, $elevation-key-umbra),
        (0, 16, 24, 2, $elevation-key-penumbra),
        (0, 6, 30, 5, $elevation-ambient),
    )
  )
) !default;


/**
 * Animation durations.
 */

$elevation-min-animation-length: 250ms !default;
$elevation-max-animation-length: 400ms !default;


/**
* Returns the two reference shadows whose elevations bound the specified
* elevation. In the case where the supplied elevation exceeds the maximum
* reference elevation, the last two reference shadows are returned.
*/

@function _find-bounding-shadow-sets($elevation) {

  @if $elevation < 0 {
    @warn "Elevation is less than zero";
  }

  @for $i from 1 to length($elevation-reference-shadows) {
    $lower: nth($elevation-reference-shadows, $i);
    $upper: nth($elevation-reference-shadows, $i + 1);
    @if (map-get($lower, "elevation") <=$elevation) and (map-get($upper, "elevation") > $elevation) {
      @return ($lower, $upper);
    }
  }

  $lower: nth( $elevation-reference-shadows, length($elevation-reference-shadows) - 1);
  $upper: nth( $elevation-reference-shadows, length($elevation-reference-shadows));

  @return ($lower, $upper);

}


/**
 * Performs linear interpolation between values a and b. Returns the value
 * between a and b proportional to x (when x is between 0 and 1. When x is
 * outside this range, the return value is a linear extrapolation).
 */
@function _lerp($x, $a, $b) {

  @return $a + $x * ($b - $a);

}


/**
 * Performs linear interpolation between shadows by interpolating each property
 * individually. Returns the value between shadow1 and shadow2 proportional to x
 * (when x is between 0 and 1. When x is outside this range, the return value is
 * a linear extrapolation).
 */
@function _lerp-shadow($x, $shadow1, $shadow2) {

  // Round all parameters, as shadow definitions do not support subpixels
  $new-x: round(_lerp($x, nth($shadow1, 1), nth($shadow2, 1))) + 0px;
  $new-y: round(_lerp($x, nth($shadow1, 2), nth($shadow2, 2))) + 0px;
  $new-blur: round(_lerp($x, nth($shadow1, 3), nth($shadow2, 3))) + 0px;
  $new-spread: round(_lerp($x, nth($shadow1, 4), nth($shadow2, 4))) + 0px;
  $new-color: nth($shadow1, 5); // No need to lerp the shadow color

  @return ($new-x $new-y $new-blur $new-spread $new-color);

}


/**
 * Calculates the set of shadows at a given elevation.
 */

@function _calculate-shadow-set-at-depth($elevation) {

  $bounds: _find-bounding-shadow-sets($elevation);
  $min: nth($bounds, 1);
  $max: nth($bounds, 2);
  $x: ($elevation - map-get($min, "elevation")) / (map-get($max, "elevation") - map-get($min, "elevation"));
  $elevation-shadows: ();

  @for $i from 1 to length(map-get($min, "shadows")) + 1 {
    $new-shadow: _lerp-shadow($x, nth(map-get($min, "shadows"), $i), nth(map-get($max, "shadows"), $i));
    $elevation-shadows: append($elevation-shadows, $new-shadow, comma);
  }

  @return $elevation-shadows;

}


/**
 * Generates the transition for a change between 2 elevations
 * The larger the elevation change the longer the animation takes
 */

@mixin _elevation-transition($elevation-change: 6, $easing: cubic-bezier(.4, 0, .2, 1)) {
  $duration: _lerp($elevation-change/24, $elevation-min-animation-length, $elevation-max-animation-length);
  transition: box-shadow $duration $easing;
}


/**
 * Generates box-shadow and the transition for a given elevation
 * A single elevation will generate a single box-shadow set
 * Two elevations and a state will generate a default box-shadow set
 * and another set that is activated by the state
 * tested with :hover and :active
 */

@mixin elevation($elevation1, $elevation2: null, $state: null) {
  @if $elevation1==0 {
    box-shadow: none !important;
  }
  @else {
    box-shadow: _calculate-shadow-set-at-depth($elevation1);
  }

  @if ($elevation2 != null) and ($state != null) {
    @include _elevation-transition($elevation2 -$elevation2);
    &:#{$state} {
      @if $elevation1==0 {
        box-shadow: none !important;
      }
      @else {
        box-shadow: _calculate-shadow-set-at-depth($elevation2);
      }
    }
  }
}
