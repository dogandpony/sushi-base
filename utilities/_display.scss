/* =========================================================================
 * DISPLAY UTILITIES
 * ========================================================================= */

/**
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

.u-hidden {
  @include hide();
}


/**
 * Display utility classes
 *
 * Base:
 *  d = display
 * Modifiers:
 *  n     = none
 *  b     = block
 *  ib    = inline-block
 *
 *  https://github.com/tachyons-css/tachyons/blob/master/src/_display.css
 */

@mixin display($breakpoint) {

  .u-hidden#{$breakpoint} {
    @include hide();
  }

  .u-dn#{$breakpoint} {
    display: none !important;
  }

  .u-db#{$breakpoint} {
    display: block !important;
  }

  .u-dib#{$breakpoint} {
    display: inline-block !important;
  }

  .u-dtb#{$breakpoint} {
    display: table !important;
  }

  .u-dtbc#{$breakpoint} {
    display: table-cell !important;
  }

  .u-dtbcl#{$breakpoint} {
    display: table-column !important;
  }

  .u-dtbr#{$breakpoint} {
    display: table-row !important;
  }

  .u-dtbrg#{$breakpoint} {
    display: table-row-group !important;
  }

}

display();


/**
 * If using Sass-MQ for breakpoints, generate responsive hide
 * classes with breakpoint suffix. Note: breakpoints are all
 * mobile-up, i.e. mobile-first.
 *
 * For example:
 *
 * <div class="u-db@desktop">
 */

$enable-responsive-display: false !default;

@if (variable-exists(mq-breakpoints) and $enable-responsive-display == true) {

  @each $breakpoint-name, $breakpoint-value in $mq-breakpoints {

    @include mq($from: $breakpoint-name) {

      display(#{$breakpoint-separator}#{$breakpoint-name})

    }

  }

}
