/* =========================================================================
 * SPACING UTILITIES
 * ========================================================================= */

/**
 * Utility classes to put specific spacing values onto elements. The below loop
 * will generate us a suite of classes like:
 *
 *   .u-mt {}
 *   .u-pl-xs {}
 *   .u-mr-s {}
 *   .u-p {}
 *   .u-pr-0 {}
 *   .u-ph {}
 *   .u-pv-l {}
 */

/* stylelint-disable string-quotes, max-nesting-depth */

$spacing-directions: (
  null: null,
  't': '-top',
  'r': '-right',
  'b': '-bottom',
  'l': '-left',
  'h': '-left' '-right',
  'v': '-top' '-bottom',
) !default;

$spacing-properties: (
  'p': 'padding',
  'm': 'margin',
) !default;

$spacing-factors: $global-spacing-factors !default;


// When using Sass-MQ, this defines the separator for the breakpoints suffix
// in the class name. By default, we are generating the responsive suffixes
// for the classes with a `@` symbol so you get classes like:
// <div class="u-p-l@tablet">
$spacing-breakpoint-separator: $breakpoint-separator !default;

@mixin spacing(
  $properties: $spacing-properties,
  $directions: $spacing-directions,
  $factors: $global-spacing-factors,
  $breakpoint: null
) {

  // Add zero and null modifiers to the factor list so classes like `u-ph-0` and
  // `u-pl` are created automatically
  $factors: join((
    '0': 0,
    null: 1
  ), $factors);

  @each $property-namespace, $property in $properties {

    @each $direction-namespace, $direction-rules in $directions {

      @each $factor-namespace, $factor in $factors {

        // Add a hyphen before the namespace if it's not null
        // `xs` = `u-p-xs`
        // null = `u-p`
        @if ($factor-namespace != null) {
          $factor-namespace: "-#{$factor-namespace}";
        }

        .u-#{$property-namespace}#{$direction-namespace}#{$factor-namespace}#{$breakpoint} {

          @each $direction in $direction-rules {
            #{$property}#{$direction}: ($factor * $global-spacing) !important;
          }

        }

      }

    }

  }

}


/**
 * A series of spacing helper classes that you can use to give spacing.
 * Use these in your markup:
 *
 * <div class="u-pl-xs">
 *
 * The following will generate spacing helper classes.
 */

@include spacing();


/**
 * If weâ€™re using Sass-MQ, automatically generate responsive helpers for each of
 * our defined breakpoints, and give them a Responsive Suffix, e.g.:
 *
 * <div class="u-m-xl@tablet">
 */

$enable-responsive-spacing: false !default;

$spacing-responsive-properties: $spacing-properties !default;

$spacing-responsive-directions: $spacing-directions !default;

$spacing-responsive-factors: $spacing-factors !default;

@if (variable-exists(mq-breakpoints) and $enable-responsive-spacing == true) {
  @each $breakpoint-name, $breakpoint-value in $mq-breakpoints {
    @include mq($from: $breakpoint-name) {
      @include spacing(
          $spacing-responsive-properties,
          $spacing-responsive-directions,
          $spacing-responsive-factors,
          #{$spacing-breakpoint-separator}#{$breakpoint-name}
      );
    }
  }
}

/* stylelint-enable string-quotes, max-nesting-depth */
