/* ==========================================================================
   #POSITION
   ========================================================================== */

// Utility classes for position direction values, for example:
// .u-l-xs
// .u-b-l

$position-directions: (
  't': 'top',
  'r': 'right',
  'b': 'bottom',
  'l': 'left'
) !default;

$position-factors: $global-spacing-factors !default;


@mixin position-utility($breakpoint: null) {

  .#{$utility-prefix}po-s#{$breakpoint} {
    position: static !important;
  }

  .#{$utility-prefix}po-r#{$breakpoint} {
    position: relative !important;
  }

  .#{$utility-prefix}po-a#{$breakpoint} {
    position: absolute !important;
  }

  .#{$utility-prefix}po-f#{$breakpoint} {
    position: fixed !important;
  }

  .#{$utility-prefix}po-t#{$breakpoint} {
    position: sticky !important; /* [1] */
  }

  // Add zero and null modifiers to the factor list so classes like `u-b-0` and
  // `u-b` are created automatically
  $factors: map-merge(('0': 0, null: 1), $position-factors);

  @each $direction-namespace, $direction-rules in $position-directions {

    @each $factor-namespace, $factor in $factors {

      // Add a hyphen before the namespace if it's not null
      // `xs` = `u-l-xs`
      // null = `u-l`
      @if ($factor-namespace != null) {
        $factor-namespace: '-#{$factor-namespace}';
      }

      .#{$utility-prefix}#{$direction-namespace}#{$factor-namespace}#{$breakpoint} {

        @each $direction in $direction-rules {
          #{$direction}: ($factor * $global-spacing) !important;
        }

      }

    }

  }

}


/**
 * A series of spacing helper classes that you can use to give spacing.
 * Use these in your markup:
 *
 * <div class="u-r-xs">
 *
 * The following will generate spacing helper classes.
 */

@include position-utility();
